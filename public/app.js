//Problem: User interaction doesn't provide desired results.
//Solution: Add interactivity so the user can manage daily tasks.

"use strict";

var taskInput = document.getElementById("new-task"); //new-task
var addButton = document.getElementsByTagName("button")[0]; //first button
var incompleteTasksHolder = document.getElementById("incomplete-tasks"); //incomplete-tasks
var completedTasksHolder = document.getElementById("completed-tasks"); //completed-tasks

//New Task List Item Function
var createNewTaskElement = function createNewTaskElement(taskString) {
  //Create list item
  var listItem = document.createElement("li");

  //input (checkbox)
  var checkBox = document.createElement("input"); //checkbox
  //label
  var label = document.createElement("label");
  //input (text)
  var editInput = document.createElement("input"); //text
  //button.edit
  var editButton = document.createElement("button");
  //button.delete
  var deleteButton = document.createElement("button");

  //each element needs modifing
  checkBox.type = "checkbox";
  editInput.type = "text";

  editButton.innerText = "Edit";
  editButton.className = "edit";

  deleteButton.innerText = "Delete";
  deleteButton.className = "delete";

  label.innerText = taskString;

  //each element needs appending
  listItem.appendChild(checkBox);
  listItem.appendChild(label);
  listItem.appendChild(editInput);
  listItem.appendChild(editButton);
  listItem.appendChild(deleteButton);

  return listItem;
};

//Add a new task function
var addTask = function addTask() {
  console.log("Add Task..");

  //create new list item witht text from #new-task:
  var listItem = createNewTaskElement(taskInput.value);

  //append listItem to incompleteTasksHolder
  incompleteTasksHolder.appendChild(listItem);
  bindTaskEvents(listItem, taskCompleted);

  taskInput.value = "";
};

//Edit an existing task function
var editTask = function editTask() {
  console.log("Edit Task..");

  var listItem = this.parentNode;

  var editInput = listItem.querySelector("input[type=text]");
  var label = listItem.querySelector("label");

  var containsClass = listItem.classList.contains("editMode");

  //if the class of the parent is .editMode
  if (containsClass) {
    //switch to .editMode
    //label text become the input value
    label.innerText = editInput.value;
  } else {
    //swith to .editmode
    //inpit value becomes the label's text
    editInput.value = label.innerText;
  }

  //Toggle .editMode on the li
  listItem.classList.toggle("editMode");
};

//Delete an exsisting task function
var deleteTask = function deleteTask() {
  console.log("Delete Task..");

  //remove parent li from the ul
  var listItem = this.parentNode;
  var ul = listItem.parentNode;

  ul.removeChild(listItem);
};

//Mark a task as complete
var taskCompleted = function taskCompleted() {
  console.log("Task Complete ..");

  //append task li to the #completed-tasks
  var listItem = this.parentNode;
  completedTasksHolder.appendChild(listItem);
  bindTaskEvents(listItem, taskIncomplete);
};

//Mark a task as incomplete
var taskIncomplete = function taskIncomplete() {
  console.log("Incomplete Task..");

  //append task li to the #incomplete-tasks
  var listItem = this.parentNode;
  incompleteTasksHolder.appendChild(listItem);
  bindTaskEvents(listItem, taskCompleted);
};

var bindTaskEvents = function bindTaskEvents(taskListItem, checkBoxEventHandler) {
  console.log("Bind list item events");

  //select children
  var checkBox = taskListItem.querySelector("input[type=checkbox]");
  var editButton = taskListItem.querySelector("button.edit");
  var deleteButton = taskListItem.querySelector("button.delete");

  //bind editTask to edit button
  editButton.onclick = editTask;

  //bind deleteTask to delete button
  deleteButton.onclick = deleteTask;

  //bind checkBoxEventHandler to checkbox
  checkBox.onchange = checkBoxEventHandler;
};

//Ajax Function
var ajaxRequest = function ajaxRequest() {
  console.log("Ajax request");
};

//set click handler
addButton.addEventListener("click", addTask);
addButton.addEventListener("click", ajaxRequest);

//cycle over incompleteTaskHolder
for (var i = 0; i < incompleteTasksHolder.children.length; i++) {

  //bind events to li children (taskIncomplete)
  bindTaskEvents(incompleteTasksHolder.children[i], taskCompleted);
}

//cycle over completeTaskHolder
for (var i = 0; i < completedTasksHolder.children.length; i++) {

  //bind events to li children (taskIncomplete)
  bindTaskEvents(completedTasksHolder.children[i], taskIncomplete);
}
//# sourceMappingURL=data:application/json;base64,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cmNlc0NvbnRlbnQiOlsiLy9Qcm9ibGVtOiBVc2VyIGludGVyYWN0aW9uIGRvZXNuJ3QgcHJvdmlkZSBkZXNpcmVkIHJlc3VsdHMuXG4vL1NvbHV0aW9uOiBBZGQgaW50ZXJhY3Rpdml0eSBzbyB0aGUgdXNlciBjYW4gbWFuYWdlIGRhaWx5IHRhc2tzLlxuXG52YXIgdGFza0lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXctdGFza1wiKTsgLy9uZXctdGFza1xudmFyIGFkZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYnV0dG9uXCIpWzBdOyAvL2ZpcnN0IGJ1dHRvblxudmFyIGluY29tcGxldGVUYXNrc0hvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5jb21wbGV0ZS10YXNrc1wiKTsgLy9pbmNvbXBsZXRlLXRhc2tzXG52YXIgY29tcGxldGVkVGFza3NIb2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXBsZXRlZC10YXNrc1wiKTsgLy9jb21wbGV0ZWQtdGFza3NcblxuLy9OZXcgVGFzayBMaXN0IEl0ZW0gRnVuY3Rpb25cbnZhciBjcmVhdGVOZXdUYXNrRWxlbWVudCA9IGZ1bmN0aW9uKHRhc2tTdHJpbmcpIHtcbiAgLy9DcmVhdGUgbGlzdCBpdGVtXG4gIHZhciBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcblxuICAvL2lucHV0IChjaGVja2JveClcbiAgdmFyIGNoZWNrQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpOyAvL2NoZWNrYm94XG4gIC8vbGFiZWxcbiAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAvL2lucHV0ICh0ZXh0KVxuICB2YXIgZWRpdElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpOyAvL3RleHRcbiAgLy9idXR0b24uZWRpdFxuICB2YXIgZWRpdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIC8vYnV0dG9uLmRlbGV0ZVxuICB2YXIgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblxuICAvL2VhY2ggZWxlbWVudCBuZWVkcyBtb2RpZmluZ1xuICBjaGVja0JveC50eXBlID0gXCJjaGVja2JveFwiO1xuICBlZGl0SW5wdXQudHlwZSA9IFwidGV4dFwiO1xuXG4gIGVkaXRCdXR0b24uaW5uZXJUZXh0ID0gXCJFZGl0XCI7XG4gIGVkaXRCdXR0b24uY2xhc3NOYW1lID0gXCJlZGl0XCI7XG5cbiAgZGVsZXRlQnV0dG9uLmlubmVyVGV4dCA9IFwiRGVsZXRlXCI7XG4gIGRlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSBcImRlbGV0ZVwiO1xuXG4gIGxhYmVsLmlubmVyVGV4dCA9IHRhc2tTdHJpbmc7XG5cbiAgLy9lYWNoIGVsZW1lbnQgbmVlZHMgYXBwZW5kaW5nXG4gIGxpc3RJdGVtLmFwcGVuZENoaWxkKGNoZWNrQm94KTtcbiAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQobGFiZWwpO1xuICBsaXN0SXRlbS5hcHBlbmRDaGlsZChlZGl0SW5wdXQpO1xuICBsaXN0SXRlbS5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcbiAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcblxuICByZXR1cm4gbGlzdEl0ZW07XG5cbn1cblxuLy9BZGQgYSBuZXcgdGFzayBmdW5jdGlvblxudmFyIGFkZFRhc2sgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coXCJBZGQgVGFzay4uXCIpO1xuXG4gIC8vY3JlYXRlIG5ldyBsaXN0IGl0ZW0gd2l0aHQgdGV4dCBmcm9tICNuZXctdGFzazpcbiAgdmFyIGxpc3RJdGVtID0gY3JlYXRlTmV3VGFza0VsZW1lbnQodGFza0lucHV0LnZhbHVlKTtcblxuICAvL2FwcGVuZCBsaXN0SXRlbSB0byBpbmNvbXBsZXRlVGFza3NIb2xkZXJcbiAgaW5jb21wbGV0ZVRhc2tzSG9sZGVyLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgYmluZFRhc2tFdmVudHMobGlzdEl0ZW0sIHRhc2tDb21wbGV0ZWQpO1xuXG4gIHRhc2tJbnB1dC52YWx1ZSA9IFwiXCI7XG59XG5cbi8vRWRpdCBhbiBleGlzdGluZyB0YXNrIGZ1bmN0aW9uXG52YXIgZWRpdFRhc2sgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coXCJFZGl0IFRhc2suLlwiKTtcblxuICB2YXIgbGlzdEl0ZW0gPSB0aGlzLnBhcmVudE5vZGU7XG5cbiAgdmFyIGVkaXRJbnB1dCA9IGxpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFt0eXBlPXRleHRdXCIpO1xuICB2YXIgbGFiZWwgPSBsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKFwibGFiZWxcIik7XG5cbiAgdmFyIGNvbnRhaW5zQ2xhc3MgPSBsaXN0SXRlbS5jbGFzc0xpc3QuY29udGFpbnMoXCJlZGl0TW9kZVwiKTtcblxuICAvL2lmIHRoZSBjbGFzcyBvZiB0aGUgcGFyZW50IGlzIC5lZGl0TW9kZVxuICBpZihjb250YWluc0NsYXNzKSB7XG4gICAgLy9zd2l0Y2ggdG8gLmVkaXRNb2RlXG4gICAgLy9sYWJlbCB0ZXh0IGJlY29tZSB0aGUgaW5wdXQgdmFsdWVcbiAgICBsYWJlbC5pbm5lclRleHQgPSBlZGl0SW5wdXQudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy9zd2l0aCB0byAuZWRpdG1vZGVcbiAgICAvL2lucGl0IHZhbHVlIGJlY29tZXMgdGhlIGxhYmVsJ3MgdGV4dFxuICAgIGVkaXRJbnB1dC52YWx1ZSA9IGxhYmVsLmlubmVyVGV4dDtcbiAgfVxuXG4gICAgLy9Ub2dnbGUgLmVkaXRNb2RlIG9uIHRoZSBsaVxuICAgIGxpc3RJdGVtLmNsYXNzTGlzdC50b2dnbGUoXCJlZGl0TW9kZVwiKTtcbiAgfVxuXG4vL0RlbGV0ZSBhbiBleHNpc3RpbmcgdGFzayBmdW5jdGlvblxudmFyIGRlbGV0ZVRhc2sgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coXCJEZWxldGUgVGFzay4uXCIpO1xuXG4gIC8vcmVtb3ZlIHBhcmVudCBsaSBmcm9tIHRoZSB1bFxuICB2YXIgbGlzdEl0ZW0gPSB0aGlzLnBhcmVudE5vZGU7XG4gIHZhciB1bCA9IGxpc3RJdGVtLnBhcmVudE5vZGU7XG5cbiAgdWwucmVtb3ZlQ2hpbGQobGlzdEl0ZW0pO1xufVxuXG4vL01hcmsgYSB0YXNrIGFzIGNvbXBsZXRlXG52YXIgdGFza0NvbXBsZXRlZCA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZyhcIlRhc2sgQ29tcGxldGUgLi5cIik7XG5cbiAgLy9hcHBlbmQgdGFzayBsaSB0byB0aGUgI2NvbXBsZXRlZC10YXNrc1xuICB2YXIgbGlzdEl0ZW0gPSB0aGlzLnBhcmVudE5vZGU7XG4gIGNvbXBsZXRlZFRhc2tzSG9sZGVyLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgYmluZFRhc2tFdmVudHMobGlzdEl0ZW0sIHRhc2tJbmNvbXBsZXRlKTtcblxufVxuXG4vL01hcmsgYSB0YXNrIGFzIGluY29tcGxldGVcbnZhciB0YXNrSW5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZyhcIkluY29tcGxldGUgVGFzay4uXCIpO1xuXG4gIC8vYXBwZW5kIHRhc2sgbGkgdG8gdGhlICNpbmNvbXBsZXRlLXRhc2tzXG4gIHZhciBsaXN0SXRlbSA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaW5jb21wbGV0ZVRhc2tzSG9sZGVyLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgYmluZFRhc2tFdmVudHMobGlzdEl0ZW0sIHRhc2tDb21wbGV0ZWQpO1xuXG59XG5cbnZhciBiaW5kVGFza0V2ZW50cyA9IGZ1bmN0aW9uKHRhc2tMaXN0SXRlbSwgY2hlY2tCb3hFdmVudEhhbmRsZXIpIHtcbiAgY29uc29sZS5sb2coXCJCaW5kIGxpc3QgaXRlbSBldmVudHNcIik7XG5cbiAgLy9zZWxlY3QgY2hpbGRyZW5cbiAgdmFyIGNoZWNrQm94ID0gdGFza0xpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFt0eXBlPWNoZWNrYm94XVwiKTtcbiAgdmFyIGVkaXRCdXR0b24gPSB0YXNrTGlzdEl0ZW0ucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5lZGl0XCIpO1xuICB2YXIgZGVsZXRlQnV0dG9uID0gdGFza0xpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoXCJidXR0b24uZGVsZXRlXCIpO1xuXG4gIC8vYmluZCBlZGl0VGFzayB0byBlZGl0IGJ1dHRvblxuICBlZGl0QnV0dG9uLm9uY2xpY2sgPSBlZGl0VGFzaztcblxuICAvL2JpbmQgZGVsZXRlVGFzayB0byBkZWxldGUgYnV0dG9uXG4gIGRlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gZGVsZXRlVGFzaztcblxuICAvL2JpbmQgY2hlY2tCb3hFdmVudEhhbmRsZXIgdG8gY2hlY2tib3hcbiAgY2hlY2tCb3gub25jaGFuZ2UgPSBjaGVja0JveEV2ZW50SGFuZGxlcjtcblxufVxuXG4vL0FqYXggRnVuY3Rpb25cbnZhciBhamF4UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZyhcIkFqYXggcmVxdWVzdFwiKTtcbn1cblxuXG4vL3NldCBjbGljayBoYW5kbGVyXG5hZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFkZFRhc2spO1xuYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhamF4UmVxdWVzdCk7XG5cblxuLy9jeWNsZSBvdmVyIGluY29tcGxldGVUYXNrSG9sZGVyXG5mb3IodmFyIGkgPSAwOyBpIDwgaW5jb21wbGV0ZVRhc2tzSG9sZGVyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cbiAgLy9iaW5kIGV2ZW50cyB0byBsaSBjaGlsZHJlbiAodGFza0luY29tcGxldGUpXG4gIGJpbmRUYXNrRXZlbnRzKGluY29tcGxldGVUYXNrc0hvbGRlci5jaGlsZHJlbltpXSwgdGFza0NvbXBsZXRlZCk7XG59XG5cbi8vY3ljbGUgb3ZlciBjb21wbGV0ZVRhc2tIb2xkZXJcbmZvcih2YXIgaSA9IDA7IGkgPCBjb21wbGV0ZWRUYXNrc0hvbGRlci5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXG4gIC8vYmluZCBldmVudHMgdG8gbGkgY2hpbGRyZW4gKHRhc2tJbmNvbXBsZXRlKVxuICBiaW5kVGFza0V2ZW50cyhjb21wbGV0ZWRUYXNrc0hvbGRlci5jaGlsZHJlbltpXSwgdGFza0luY29tcGxldGUpO1xufVxuIl19
